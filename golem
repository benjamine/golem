#!/bin/sh

command=$1
shift
current_dir=$(pwd)
script_path="${BASH_SOURCE[0]}"
script_dir="${script_path:0:${#script_path}-5}"
script_dir_pwd="$( cd "$script_dir" && pwd )"
chmod +x "$script_path"

if [ "$command" == "help" ] || [ "$command" == "" ];
then
    echo "usage: golem <command> [<args>]

commands are:
    do            exec command on vm (synced folder to cwd)
    run           exec command on vm in golem root folder
    summon        wake the golem
    halt          halt the golem
    suspend       suspend the golem
    reload        reload the golem
    destroy       destroy the golem
    expose        forward ports from vm to host (parameters: vmport localport)
    clean         clear all synced folders
    status        display golem status
    ssh           ssh into golem machine
    global-alias  create global 'golem' alias
    where         display golem location
"
    exit
fi

cd "$script_dir_pwd"

if [ $(pwd) == $current_dir ]; then
    at_golem_dir=true
fi

if [ "$command" == "where" ];
then
    echo "$script_path"
    exit $?
fi

if [ "$command" == "global-alias" ];
then
    
    bin_dir="/usr/local/bin"
    if [ -d "$bin_dir" ];
    then
        echo "$script_dir_pwd/golem \$*" > "$bin_dir/golem"
        chmod +x "$bin_dir/golem"
        if [ $? == 0 ];
        then
            echo "'golem' global alias created"
        fi
    else
        if [ -d "c:\\windows" ];
        then
            # yes this is nasty, so is windows CLI
            sh ./utils/windows-elevate.sh "echo \"\"@$script_path %*\"\" > \"\"${SYSTEMROOT}\golem.cmd\"\""
        else
            echo "WARNING: unable to set global alias on current system"
        fi
    fi
    exit $?
fi

if [ "$command" == "up" ] || [ "$command" == "summon" ];
then
    echo "Summoning the Golem!"
    vagrant up
    if [ $? == 0 ];
    then
        vagrant ssh -c "cat /vagrant/resources/banner.erb"
    fi
    exit $?
fi

if [ "$command" == "halt" ];
then
    vagrant halt
    exit $?
fi

if [ "$command" == "suspend" ];
then
    vagrant suspend
    exit $?
fi

if [ "$command" == "reload" ];
then
    vagrant reload
    exit $?
fi

if [ "$command" == "destroy" ] || [ "$command" == "die" ];
then
    vagrant destroy
    exit $?
fi

if [ "$command" == "clean" ];
then
    if [ -e "./synced_folders" ];
    then
        echo "removing all synced folders"
        echo "(they get created automatically when using 'golem do')"
        rm ./synced_folders
        echo "removing all forwarded ports"
        echo "(they get created automatically when using 'golem expose')"
        rm ./forwarded_ports
        vagrant reload
    else
        echo "no synced folders found, done."
    fi
    exit $?
fi

if [ "$command" == "status" ];
then
    vagrant status
    exit $?
fi

if [ "$command" == "ssh" ];
then
    vagrant ssh
    exit $?
fi

if [ "$command" == "run" ];
then
    vagrant ssh -c "cd /vagrant && $*"
    exit $?
fi

if [ "$command" == "expose" ];
then
  vmport="$1"
  localport="$2"

  # remove duplicates
  if [ -e ./forwarded_ports ]; then
    if grep -q "$vmport => $localport" ./forwarded_ports; then
      echo "port forward already existing"
      exit $?
    fi

    if grep -q "$vmport =>" ./forwarded_ports; then
      echo 'removing existing forward'
      cat ./forwarded_ports | grep "$vmport =>"
      cat ./forwarded_ports | grep -v "$vmport =>" > ./forwarded_ports.tmp
      mv ./forwarded_ports.tmp ./forwarded_ports
    fi
    if grep -q " => $localport" ./forwarded_ports; then
      echo 'removing existing forward'
      cat ./forwarded_ports | grep " => $localport"
      cat ./forwarded_ports | grep -v " => $localport" > ./forwarded_ports.tmp
      mv ./forwarded_ports.tmp ./forwarded_ports
    fi
  fi

  echo "exposing golem http port $vmport to local $localport"
  echo " $vmport => $localport" >> ./forwarded_ports

  echo "reload to apply changes"
  exit $?
fi

if [ "$command" == "do" ];
then
    guest_dir='/vagrant'
    if ! [ $at_golem_dir ]; then
        synced_folder=$(grep -x "^ $current_dir => .*$" ./synced_folders)
        if ! [ -n "$synced_folder" ];
        then
            guest_dir="/host/${current_dir//[\/:\\]/_}"
            echo "syncing $current_dir as $guest_dir..."
            echo " $current_dir => $guest_dir" >> ./synced_folders
            # reload to make vagrant created the new folder
            vagrant reload
        else
            guest_dir=$(echo "$synced_folder" | sed -E "s/^ .* => (.*)$/\\1/")
        fi
    fi

    if ! [ -n "$*" ];
    then
        export LC_INITIALDIR=" $guest_dir"
        vagrant ssh -- -o SendEnv=LC_INITIALDIR
    else
        vagrant ssh -c "cd $guest_dir && $*"
    fi

    exit $?
fi

echo "'$command' is not a golem command. See 'golem help'"
